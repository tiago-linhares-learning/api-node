name: Deploy App + Infra

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  Setup-Node:
    runs-on: self-hosted  
    env:
      ACTIONS_RUNNER_DEBUG: true  
      ACTIONS_STEP_DEBUG: true  
      ACTIONS_DEBUG: true  
    steps:
      - name: Instalar Docker
        run: |
          if ! command -v docker &> /dev/null
          then
            echo "Docker não encontrado. Instalando..."
            curl -fsSL https://get.docker.com | sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
            docker --version  # Verifica se o Docker foi instalado corretamente
          else
            echo "Docker já está instalado."
          fi

      - name: Instalar Node.js v22.14.0
        run: |
          curl -sL https://deb.nodesource.com/setup_22.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node -v  # Verifica a versão do Node.js

  Build:
    needs: setup-node  
    runs-on: self-hosted  
    permissions: write-all

    steps:
      - name: Checkout código
        uses: actions/checkout@v2
      
      - name: Instalar dependências e compilar TypeScript
        run: |
          cd .github/workflows/reusable/valida_arquivo_sonar
          npm install --save-dev @types/node
          npm run build

      - name: Verificar se o arquivo sonar-project.properties existe
        uses: ./.github/workflows/reusable/valida_arquivo_sonar
        with:
          path: 'sonar-project.properties'  


      - name: Instalar dependências
        run: |
          npm install

      - name: Executar testes unitários
        run: |
          npm test

      - name: Construir a aplicação
        run: |
          npm run build

      - name: Install unzip
        run: sudo apt-get update && sudo apt-get install -y unzip

      - name: Executar análise de código e Quality Gate no SonarQube
        uses: SonarSource/sonarqube-scan-action@v4
        with:
          extraArgs: |
            -Dsonar.qualitygate.wait=true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_PROJECT_PROPERTIES: './sonar-project.properties'
         
      - name: Construir imagem Docker
        run: |
          docker build -f docker/Dockerfile -t tiagolinhares/my-node-app:${{ github.sha }} .
          docker tag tiagolinhares/my-node-app:${{ github.sha }} tiagolinhares/my-node-app:latest

      - name: Logar no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Enviar imagem para Docker Hub
        run: |
          docker images
          docker push tiagolinhares/my-node-app:${{ github.sha }}
          docker push tiagolinhares/my-node-app:latest

      - name: Salvar imagem Docker como arquivo .tar
        run: |
          docker save -o my-node-app-${{ github.sha }}.tar tiagolinhares/my-node-app:${{ github.sha }}

      - name: Obter a versão do package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Criar uma tag no repositorio
        run: |
          git tag v${{ env.VERSION }}-${{ github.sha }}
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/tiago-linhares-learning/api-node.git v${{ env.VERSION }}-${{ github.sha }}
          git fetch --tags

      - name: Criar um release no GitHub
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION }}-${{ github.sha }}  
          release_name: Release ${{ env.VERSION }}-${{ github.sha }}
          body: "Release para o commit ${{ github.sha }} e versão ${{ env.VERSION }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

      - name: Fazer upload da imagem Docker como artefato
        if: ${{ env.UPLOAD_RELEASE == 'TRUE' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            my-node-app-${{ github.sha }}.tar
          tag_name: v${{ env.VERSION }}-${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
  
  Deploy:
    needs: build
    runs-on: self-hosted
    environment:
      name: deploy
      url: https://github.com/tiago-linhares-learning/api-node
    steps:
      - name: Checkout do Repositório de Infraestrutura
        uses: actions/checkout@v2
        with:
          repository: tiago-linhares-learning/infra-node
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          ref: main
          path: infra-repo
      
      - name: Instalar Helm
        run: |
          curl -sSL https://get.helm.sh/helm-v3.8.0-linux-amd64.tar.gz -o helm.tar.gz
          tar -zxvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version  # Verifica se o Helm foi instalado corretamente

      - name: Adicionar Repositório de Chart do Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
      
      - name: Obter a versão do package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Comparar arquivos e realizar ações
        run: |
          # Definir os caminhos dos arquivos
          FILE1="./infra/infra.yaml"
          FILE2="./infra-repo/charts/my-node-app/values.yaml"
          
          # Comparar os arquivos e verificar se são iguais
          if cmp -s "$FILE1" "$FILE2"; then
            echo "Os arquivos são iguais. Apagando $FILE1."
            rm "$FILE1"  # Apaga o arquivo infra.yaml
          else
            echo "Os arquivos são diferentes. Apagando $FILE2 e renomeando $FILE1 para values.yaml."
            rm "$FILE2"  # Apaga o arquivo values.yaml
            mv "$FILE1" "$FILE2"  # Renomeia infra.yaml para values.yaml
          fi
      - name: Gerar manifestos do Kubernetes com Helm
        run: |
          
          mkdir -p infra-repo/k8s/deployments
          
          IMAGE_VERSION="v${{ env.VERSION }}-${{ github.sha }}"
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
          
          sed -i "s/^version:.*$/version: $IMAGE_VERSION/" infra-repo/charts/my-node-app/Chart.yaml

          helm create my-node-app
          helm template my-node-app ./infra-repo/charts/my-node-app --set image.tag=${{ github.sha }} > infra-repo/k8s/deployments/my-node-app.yaml
          cat infra-repo/k8s/deployments/my-node-app.yaml

      - name: Commitar os manifestos no repositório de infraestrutura
        run: |
          cd infra-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          if [[ $(git diff --cached --shortstat) != "" ]]; then
            git commit -m "Adicionando manifestos de deploy para a versão ${{ github.sha }}"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/tiago-linhares-learning/infra-node.git
          else
            echo "Nenhuma alteração encontrada, commit não realizado."
          fi

      - name: Criar o aplicativo no ArgoCD
        run: |
          # Baixar o ArgoCD CLI
          curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/download/v2.2.2/argocd-linux-amd64
          sudo mv /tmp/argocd /usr/local/bin/argocd
          sudo chmod +x /usr/local/bin/argocd
          chmod +x /usr/local/bin/argocd

          # Login no ArgoCD usando um token
          argocd login 82.25.79.79:31295 --username admin --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

          # Criar o aplicativo no ArgoCD, apontando para o repositório e diretório onde os manifestos estão
          argocd app create my-node-app \
            --repo https://github.com/tiago-linhares-learning/infra-node.git \
            --path k8s/deployments \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy automated  # Sincronização automática

      - name: Sincronizar o aplicativo no ArgoCD
        run: |
          # Forçar a sincronização para aplicar o manifesto no cluster
          argocd app sync my-node-app

      # Passo para verificar se a aplicação foi sincronizada com sucesso
      - name: Verificar o status do aplicativo no ArgoCD
        run: |
          argocd app wait my-node-app --health --timeout 600
 
  